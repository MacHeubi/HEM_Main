"Description";"Advanced";"Key";"Value"
"Anonymous block";"false";"anon";"DECLARE
                  dummy NUMBER;
                  BEGIN
   SELECT count(*) INTO dummy FROM dual;
   |;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      NULL;
   WHEN OTHERS THEN
      NULL;
END;  
      "
"Local Assertion Procedure with supporting DBMS_OUTPUT substitute";"false";"assertloc";"DECLARE
   assertion_failure EXCEPTION;
   PROCEDURE pl (
      str         IN   VARCHAR2,
      len         IN   INTEGER := 80,
      expand_in   IN   BOOLEAN := TRUE
   )
   IS 
      v_len   PLS_INTEGER     := LEAST (len, 255);
      v_str   VARCHAR2 (2000);
   BEGIN
      IF LENGTH (str) > v_len
      THEN
         v_str := SUBSTR (str, 1, v_len);
         DBMS_OUTPUT.put_line (v_str);
         pl (SUBSTR (str, len   + 1), v_len,expand_in);
      ELSE
         v_str := str;
         DBMS_OUTPUT.put_line (v_str);
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         IF expand_in
         THEN
            DBMS_OUTPUT.ENABLE (1000000);
            DBMS_OUTPUT.put_line (v_str);
         ELSE
            RAISE;
         END IF;
   END;
   
   PROCEDURE assert (
      condition_in   IN   BOOLEAN,
      msg_in         IN   VARCHAR2 := NULL
   )
   IS
   BEGIN
      IF    NOT condition_in
         OR condition_in IS NULL
      THEN
         IF msg_in IS NOT NULL
         THEN
            pl (msg_in);
            pl (DBMS_UTILITY.format_call_stack);
         END IF;

         RAISE assertion_failure;
      END IF;
   END;
BEGIN
   -- Sample usage
   assert ( | my_parameter_in IS NOT NULL,
      'Value cannot be NULL');
EXCEPTION
   WHEN assertion_failure  
   THEN
      -- Decide if you want to handle this locally or not.    
END;
      "
"Autonomous transaction PROCEDURE shell";"false";"autonproc";"PROCEDURE | ()
IS
   -- Available in Oracle8i and above
   PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
   -- Upon successful completion, save all changes.
   COMMIT;
EXCEPTION
   -- For each error handler, don't forget the rollback!
   WHEN OTHERS 
   THEN
      ROLLBACK;   
END;
      "
"BULK COLLECT Query";"false";"bcquery";"DECLARE
   l_array1 <array_type_declaration>;
   l_array2 <array_type_declaration>;
BEGIN
   -- Fetch into individual collections, one for each
   -- element in the SELECT list.
   SELECT |
      BULK COLLECT INTO l_array1, l_array2
      FROM 
     WHERE ;
END;
      "
"CASE statment";"false";"case";"case |
   WHEN condition THEN

   WHEN condition THEN

   ELSE

END CASE;"
"Entire cursor block";"false";"crbl";"DECLARE
   CURSOR &&c1 IS
      SELECT | FROM   WHERE;
   c1rec &&c1%ROWTYPE;
BEGIN
   OPEN &&c1;
   LOOP
      FETCH &&c1 INTO c1rec;
      EXIT WHEN &&c1%NOTFOUND;
   END LOOP;
   CLOSE &&c1;
END;"
"Package body cursor";"false";"crbo";"/* declare package body */
CURSOR c1 RETURN |tablename%ROWTYPE IS
   SELECT ....;"
"Cursor LOOP";"false";"crloop";"OPEN &&c1;
LOOP
   FETCH &&c1.| INTO  ;
   EXIT WHEN &&c1%NOTFOUND;
END LOOP;
CLOSE &&c1;"
"Package spec cursor";"false";"crsp";"/* declare package cursor specification */
CURSOR c1 RETURN |tablename%ROWTYPE;"
"CREATE TABLE AS Query";"false";"crt";"CREATE TABLE | AS (
)"
"CURSOR declaration";"false";"cur";"CURSOR c1 IS
   SELECT | FROM table_name WHERE column_name = value;"
"CURSOR FOR-LOOP";"false";"curfor";"FOR c1_rec IN &&c1 LOOP
   |;
END LOOP;"
"CURSOR with Parameter declaration";"false";"curpar";"CURSOR c2 (xxx NUMBER) IS
   SELECT | FROM table_name WHERE column_name = xxx;"
"CURSOR with Parameter FOR-LOOP";"false";"curpfor";"FOR c2_rec IN c2 (yyy) LOOP
   |;
END LOOP;"
"Local DBMS_OUTPUT Substitute";"false";"dolocal";"DECLARE

   -- Will wrap arbitrarily long strings, and automatically expand  
   -- the DBMS_OUTPUT buffer.
   PROCEDURE pl (
      str         IN   VARCHAR2,
      len         IN   INTEGER := 80,
      expand_in   IN   BOOLEAN := TRUE
   )
   IS 
      v_len   PLS_INTEGER     := LEAST (len, 255);
      v_str   VARCHAR2 (2000);
   BEGIN
      IF LENGTH (str) > v_len
      THEN
         v_str := SUBSTR (str, 1, v_len);
         DBMS_OUTPUT.put_line (v_str);
         pl (SUBSTR (str, len   + 1), v_len,expand_in);
      ELSE
         v_str := str;
         DBMS_OUTPUT.put_line (v_str);
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         IF expand_in
         THEN
            DBMS_OUTPUT.ENABLE (1000000);
            DBMS_OUTPUT.put_line (v_str);
         ELSE
            RAISE;
         END IF;
   END;
BEGIN
   |
END;"
"FORALL Delete";"false";"fadel";"DECLARE
   l_array  <array_type_declaration>;
BEGIN
   FORALL indx IN l_array.FIRST .. l_array.LAST
      DELETE FROM |
       WHERE column = l_array (indx);
END;"
"FORALL with SAVE EXCEPTIONS error handling";"false";"faexc";"DECLARE -- Oracle9i and above!
  l_array   <array_type_declaration>;
  bulk_errors EXCEPTION;
   PRAGMA EXCEPTION_INIT ( bulk_errors, -24381 );
BEGIN    
   FORALL indx IN l_array.FIRST .. l_array.LAST
      SAVE EXCEPTIONS
      /*DML statement of choice*/
      |;
EXCEPTION
   WHEN bulk_errors 
   THEN 
      FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
      LOOP
         DBMS_OUTPUT.PUT_LINE (
            'Error ' || indx || ' occurred during ' ||

            'iteration ' || SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX ||
            ' updating name to ' ||

                 enames_with_errors(SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX));
         DBMS_OUTPUT.PUT_LINE (
            'Oracle error is ' ||
            SQLERRM(-1 * SQL%BULK_EXCEPTIONS(indx).ERROR_CODE));
      END LOOP;   
END;
/"
"FORALL Insert";"false";"fains";"DECLARE
   l_array1     <array_type_declaration>;
   l_array2     <array_type_declaration>;
   l_array3     <array_type_declaration>;
BEGIN
   FORALL indx IN l_array1.FIRST .. l_array1.LAST
      INSERT INTO |
         ( column list )
         VALUES
         (l_array2 (indx), l_array3 (indx) ...);
END;"
"FORALL Update";"false";"faupd";"DECLARE
   l_array1 <array_type_declaration>;
   l_array2 <array_type_declaration>;
BEGIN
   FORALL indx IN l_array1.FIRST .. l_array1.LAST
      UPDATE |
         SET column = l_array2 (indx)
       WHERE column = l_array1 (indx);
END;"
"FOR-LOOP statement";"false";"for";"FOR | IN 1 .. 10 LOOP

END LOOP;"
"Nested FOR-LOOPs with EXIT-WHEN outer";"false";"forwo";"<<outer>>
FOR i IN 1 .. 10 LOOP

   FOR j IN 1 .. 10 LOOP

      EXIT outer WHEN |;
   END LOOP;
END LOOP outer;"
"FUNCTION shell";"false";"func";"FUNCTION | () RETURN &&returntype
IS
  xxx &&returntype;
BEGIN

   RETURN xxx;
END;"
"Local substitute for UTL_FILE.GET_LINE";"false";"getline";"DECLARE
   -- Trap NO_DATA_FOUND and return EOF flag.
   file_id UTL_FILE.FILE_TYPE;
   line VARCHAR2(32767);
   eof BOOLEAN;

   PROCEDURE get_nextline 
     (file_in IN UTL_FILE.FILE_TYPE, 
      line_out OUT VARCHAR2, 
      eof_out OUT BOOLEAN)
   IS
   BEGIN
      UTL_FILE.GET_LINE (file_in, line_out);
      eof_out := FALSE;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
        line_out := NULL;
        eof_out  := TRUE;
   END;
BEGIN /* main */
   file_id := UTL_FILE.FOPEN (
      <location>, <filename>, max_linesize => 32767);
      
   LOOP
      get_nextline (file_id, line, eof);
      EXIT WHEN eof;
      /*process line*/
      |
   END LOOP;
   
   UTL_FILE.FCLOSE (file_id);
END;   "
"GOTO statment";"false";"goto";"<<code_label>>
|;
goto code_label;"
"IF-THEN statement";"false";"ift";"IF | THEN

END IF;"
"IF-THEN-ELSE statement";"false";"ifte";"IF | THEN

ELSE

END IF;"
"IF-THEN-ELSIF statement";"false";"iftei";"IF | THEN

ELSIF condition THEN

ELSE

END IF;"
"Invoker Rights PROCEDURE shell";"false";"invproc";"PROCEDURE | ()
  AUTHID CURRENT_USER
IS
BEGIN

END;"
"LOOP statement";"false";"lp";"LOOP
   |;
END LOOP;"
"LOOP with EXIT-WHEN statement";"false";"lpew";"LOOP
   EXIT WHEN |;
END LOOP;"
"LOOP with EXIT statement";"false";"lpex";"LOOP
   IF | THEN
      EXIT;
   END IF;
END LOOP;"
"MODIFY TABLE ADD";"false";"mta";"MODIFY TABLE | ADD (
)"
"NDS multiple row query";"false";"ndsmrq";"DECLARE
   l_var VARCHAR2(32767);
   TYPE refcur_t IS REF CURSOR;
   l_cursor refcur_t;
   l_record table%ROWTYPE; -- MODIFY TO MATCH SELECT
BEGIN
   OPEN l_cursor FOR 'SELECT | ';
   LOOP
      FETCH l_cursor INTO l_record;
      EXIT WHEN l_cursor%NOTFOUND;
   END LOOP;
   CLOSE l_cursor;
END;"
"NDS dynamic PL/SQL block execution";"false";"ndsplsql";"DECLARE
   l_block VARCHAR2(32767) :=
      '| ';
BEGIN
   EXECUTE IMMEDIATE 
      'BEGIN ' || l_block || 'END;'
      INTO l_var
      USING var1 IN, var2 IN OUT, var3 OUT;
END;"
"NDS single row query";"false";"ndssrq";"DECLARE
   l_var VARCHAR2(32767);
BEGIN
   EXECUTE IMMEDIATE 
      'SELECT | '
      INTO l_var
      USING;
END;"
"PROCEDURE shell";"false";"proc";"PROCEDURE | ()
IS
BEGIN

END;"
"Record-based Insert";"false";"recins";"DECLARE  
   l_record &&tablename%ROWTYPE;
BEGIN
   -- Available in Oracle9i Release 2 and above
   INSERT INTO &&tablename
      VALUES l_record;
   |
END;"
"Sample record declaration";"false";"record";"TYPE |RecordName IS RECORD (
  deptno  NUMBER;
  deptname dept.name%TYPE );
dept_rec RecordName;"
"Record-based Update";"false";"recupd";"DECLARE  
   l_record &&tablename%ROWTYPE;
BEGIN
   -- Available in Oracle9i Release 2 and above
   UPDATE &&tablename
      SET ROW = l_record
    WHERE |;
END;"
"UPDATE with SAVEPOINTS";"false";"ups";"BEGIN
   SAVEPOINT my_point;
   UPDATE | SET ;
EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK TO my_point;
END;"
"UTL_FILE exception handling";"false";"utlfexc";"DECLARE
   fid UTL_FILE.FILE_TYPE;

   PROCEDURE recNgo (str IN VARCHAR2)
   IS
   BEGIN
      DBMS_OUTPUT.PUT_LINE (CONCAT('UTL_FILE error: ', str));
      UTL_FILE.FCLOSE (fid);
   END;
BEGIN

    |

EXCEPTION
   WHEN UTL_FILE.INVALID_PATH
    THEN recNgo ('invalid_path'); 
   WHEN UTL_FILE.INVALID_MODE
    THEN recNgo ('invalid_mode');
   WHEN UTL_FILE.INVALID_FILEHANDLE
    THEN recNgo ('invalid_filehandle');
   WHEN UTL_FILE.INVALID_OPERATION
    THEN recNgo ('invalid_operation');
   WHEN UTL_FILE.READ_ERROR
    THEN recNgo ('read_error');
   WHEN UTL_FILE.WRITE_ERROR
    THEN recNgo ('write_error');
   WHEN UTL_FILE.INTERNAL_ERROR
    THEN recNgo ('internal_error');
   WHEN OTHERS
    THEN recNgo (SQLERRM);
END;"
"";"false";"scc";"select *
from   k.code_obj_class
where  id in (|);"
"";"false";"scci";"select *
from   k.code_obj_classif
where  id in (|);"
"";"false";"sccc";"select *
from   k.code_obj_class
where  obj_classif_id in (|);"
"";"false";"td";"to_date('|','yyyymmdd')"
"";"false";"sck";"select *
from   k.code_obj_key
where  id in (|);"
"obj_type_id";"false";"oti";"obj_type_id"
"";"false";"so";"exec k.session#.open_session;"
"alter session set current_schema = K";"false";"as";"alter session set current_schema = K"
"rownumber";"false";"rn";"row_number() over (partition by i_cont order by o_doc_id ) rnum"
"list_agg";"false";"la";"listagg(col, ',') within group (order by col)"
"";"false";"sob";"exec k.session#.open_session(i_bu_id => |);"
"";"false";"split";"regexp_substr(i_migrt_key,'[^$]+',1,1)"
"";"false";"bp";"select *
from   k.base_par      bp
join   k.base_par_item bpi on bp.id = bpi.base_par_id
where  1 = 1
  and  bp.intl_id  like '%%'
  and  bpi.intl_id like '%%'"
"";"false";"okvl";"select *
from   k.obj_rel_key
where  upper(key_val) like '%|%'"
"";"false";"oni";"select *
from   k.obj_name_intl
where  obj_id = |"
"";"false";"onin";"select *
from   k.obj_name_intl
where  lower(name) like '%|%'"
"";"false";"class";"select oc.obj_id, ct.intl_id obj_type, cst.intl_id obj_sub_type
       ,coci.id classif_id, coci.intl_id classif_intl_id, coci.name  classif_name--, nvl2(coci.method,'+',null) is_calc
       ,coc.id class_id, coc.intl_id class_intl_id, coc.name  class_name
       ,oni.name,oo.start_date open_date, oo.close_date
 from   k.obj_class             oc
 join   k.code_obj_class        coc   on oc.obj_class_id    = coc.id
 join   k.code_obj_classif      coci  on oc.obj_classif_id  = coci.id
 join   k.obj                   oo    on oc.obj_id          = oo.id
 join   k.code_obj_type         ct    on oo.obj_type_id     = ct.id
 left join k.code_obj_sub_type  cst   on oo.obj_sub_type_id = cst.id
 join   k.obj_name_intl    oni   on oc.obj_id         = oni.obj_id
 where  oc.obj_id        in ( |)
 order by oc.obj_classif_id, oc.obj_class_id;"
"";"false";"s";"select *
from   |"
"";"false";"col";"select *
from   all_tab_columns
where  1 =1 
  and  owner       = 'K'
  and  table_name  like '%%'
  and  table_name  not like '%/_V%' escape '/'
  and  column_name like '%|%'
order by column_id"
"";"false";"tab";"select *
from   all_tables
where  1 =1 
  and  owner       = 'K'
  and  table_name  like '%|%';"
"BP Person Rel";"false";"bpr";"select bp.name       bp_name
     , pers.name     person_name
     , cbprt.name    bp_person_rel_type
     , car.name      auth_role
     , rel.*, bpra.*
from   k.obj_bp_person_rel  rel
join   k.obj_name_intl bp   on rel.obj_id = bp.obj_id
join   k.obj_name_intl pers on rel.rel_person_id = pers.obj_id
join   k.code_bp_person_rel_type cbprt on rel.bp_person_rel_type_id = cbprt.id 
left join k.obj_bp_pers_rel_auth bpra  on rel.id = bpra.bp_person_rel_id 
left join k.code_auth_role       car   on bpra.auth_role_id = car.id
where  rel.obj_id = |"
"count(*)";"false";"cnt";"count(*)"
"";"false";"oko";"select *
from   k.obj_rel_key
where  obj_id in (|)"
"";"false";"okv";"select *
from   k.obj_rel_key
where  upper(key_val) in ('|')"
"in not null";"false";"inn";"is not null"
"log";"false";"log";"select *
from   k.log
where timestamp > trunc(sysdate)
order by timestamp desc"
"log where id =";"false";"logi";"select *
from   k.log
where  id in (|)"
"";"false";"dual";"select |
from   dual;"
"";"false";"bgp";"select bgp_id, name, count(*) cnt, count(job) cnt_job
from   k.obj_bgp_v
where  valid = '+'
group  by bgp_id, name
order  by 1;"
"";"false";"set";"set linesize 200
set echo on
set serveroutput on
set time on
set timing on"
"";"false";"sc";"select *
from   k.code_|"
"";"false";"suffix";"substr(regexp_substr(i_migrt_key, '\.[^\.]*$'),2)"
"workflow action";"false";"wa";"select *
from   k.wfc_action wa
join   k.meta_typ   mt on wa.meta_typ_id = mt.id
where  1 = 1
  and  mt.intl_id like 'xfer'
  and  wa.intl_id like '%cert%'
--  and  wa.old_wfc_status_id in (0)
--  and  wa.new_wfc_status_id in (90)"
"gsearch in src";"false";"gs";"select /* + parallel(8) */ 
       s.name         src_name
      ,ds.* 
from        dba_source     ds
left join k.src_db_obj_rel sr on ds.name   = sr.db_obj_name 
left join k.src            s  on sr.src_id = s.id
where  lower(ds.text) like '%|%'
--  and  ds.type like '%%'
--  and  ds.type in ('PACKAGE BODY')
order by 1,2,3;"
"reset package";"false";"res";"exec dbms_session.reset_package;"
"i_migrt_key";"false";"key";"i_migrt_key"
"i_migrt_key_seq_nr";"false";"keys";"i_migrt_key_seq_nr"
"Migr API";"false";"mig_bp";"set echo on
set serveroutput on
set time on
set timing on
begin
  k.session#.open_session(i_bu_id => 9);
  k.migrt_bp#.gen_bp(
    i_migr_key                     => '%',
    i_migr_key_seq_nr              => 0,
    i_do_queue                     => true,
    i_chunk_size                   => 10,
    i_parallel                     => false
  );
end;
/"
"select from nc$pf$bp_descn";"false";"sd";"select *
from   k.rbsc$bl$decsn_obj"
"log#write";"false";"lw";"nc$pf$util#.log#write(|);"
"log#err";"false";"le";"nc$pf$util#.log#err(|);"
"i_migrt_source";"false";"ms";"i_migrt_source"
"select * from migrt_";"false";"sm";"select *
from   k.migrt_|"
"migr err";"false";"err";"select a.o_err, a.*
from   k.migrt_|   a
where  a.o_err is not null;"
"migr err grouped";"false";"errg";"select substr(o_err, instr(o_err,'/')+1) err, count(*) cnt
from   k.migrt_|
where  o_err is not null
group  by substr(o_err, instr(o_err,'/')+1)
order  by 2 desc;"
"select from mc$pf$log";"false";"sl";"select *
from   k.rbsc$bl$log
where  logger_level < 15
order  by id desc"
"bp_pers_rel_auth";"false";"auth";"select get_obj(pr.obj_id) bp_name, pr.bp_person_rel_type_id, crt.name, pra.auth_role_id, car.name,  get_obj(rel_person_id) person_name, op.person_type_id, cpt.intl_id, pr.*, pra.*
from   obj_bp_person_rel       pr
join   obj_bp_pers_rel_auth    pra on pr.id = pra.bp_person_rel_id
join   code_bp_person_rel_type crt on pr.bp_person_rel_type_id = crt.id
join   code_auth_role          car on pra.auth_role_id = car.id
join   obj_person              op  on pr.rel_person_id = op.obj_id
join   code_obj_sub_type       cpt on op.person_type_id = cpt.id
where  1 = 1
  and  pr.obj_id        = |  /* bp_id */
--  and  pr.rel_person_id = 
--  and  pr.rel_person_id not in ( 270444, 261613, 262414 )"
"search in sources";"false";"src";"select /* + parallel(8) */
       s.name         src_name
      ,ds.*
from        dba_source     ds
left join k.src_db_obj_rel sr on ds.name   = sr.db_obj_name
left join k.src            s  on sr.src_id = s.id
where  lower(ds.text) like '%|%'
--  and  ds.type like '%%'
--  and  ds.type in ('#39'PACKAGE BODY'#39')'
order by 1,2,3;"
"obj_remv";"false";"or";"exec obj_remv#.obj#remv(|);"
"obj_remv (bulk)";"false";"orb";"exec session#.open_session(i_bu_id => 7);
delete from list_obj_i;
insert into list_obj_i
select o_obj_id
from   migrt_asset
where  i_migrt_source = ''
  and  o_obj_id is not null;

exec obj_remv#.obj#remv_by_list_obj_i;"
"rbsc$bl$";"false";"r";"rbsc$bl$|"
"create table as";"false";"cta";"create table | parallel nologging as"
"to_number with conversion error";"false";"tn";"to_number(| default null on conversion error)"
"lib_co.get_item";"false";"lgi";"k.lib_co.get_item(6,i_migrt_key,'.')"
"def max date";"false";"dm";"to_date('47121231', 'YYYYMMDD');"
"get timing for a query";"false";"timing ";"set echo on

variable n number

exec :n := dbms_utility.get_time

set termout off

select * from your_table;  -- The query here

set termout on

exec dbms_output.put_line( ((dbms_utility.get_time-:n)/100) )"
"runbook";"false";"rb";"select a.phase, a.* from rbsc$bl$runbook a
where  1 = 1
  and  phase in ('Position')
--  and  resp  in ('Gianni')
--  and  id > 4270
--  and  o_timestamp_end is null
order by 2 asc;"
"get_obj";"false";"go";"select get_obj(|)
from   dual;"
"date long";"false";"tdl";"to_date('|','dd.mm.yyyy hh24:mi:ss')"
"i_migrt_key like 'BL.ADA.CUK.%'";"false";"keyl";"i_migrt_key like 'BL.ADA.CUK.%'"
"all views";"false";"view";"select *
from   all_views
where  1 =1 
  and  owner       = 'K'
  and  view_name  like '%|%';"
"migr stats";"false";"stat";"select i_migrt_key_seq_nr
      ,o_migrt_run_seq_nr
      ,count(*) cnt, count(o_doc_id) OK, count(o_err) err
      ,min(o_timestamp),max(o_timestamp),round((max(o_timestamp)-min(o_timestamp))*24*60,2) elapsed
      ,case when o_migrt_run_seq_nr is not null and (max(o_timestamp)-min(o_timestamp)) > 0 then
         to_char(count(o_migrt_run_seq_nr)/((max(o_timestamp)-min(o_timestamp))*24),'999G999')
       end orders_per_h
from   k.migrt_|
group  by i_migrt_key_seq_nr
         ,o_migrt_run_seq_nr
order  by 1, 2;"
"nr of cpus and more";"false";"cpu";"select stat_name,to_char(value) as value ,comments from v$osstat where stat_name in ('NUM_CPUS','NUM_CPU_CORES','NUM_CPU_SOCKETS')
union
select stat_name,value/1024/1024/1024 || ' GB' ,comments from v$osstat where stat_name in ('PHYSICAL_MEMORY_BYTES')"
"enable_parallel_dml parallel";"false";"dml";" /*+ enable_parallel_dml parallel */"
"select * from migrt_ where i_migrt_key like";"false";"smk";"select *
from   k.migrt_|
where  i_migrt_key like 'BL.ADA.%'"
"";"false";"dates";"select k.rbsc$bl$def#.get_veri_date   veri_date
     , k.rbsc$bl$def#.get_value_date  val_date   -- only value_date -1, except monday
     , k.rbsc$bl$def#.get_trx_date    trx_date
     , k.rbsc$bl$def#.get_perf_date   perf_date
     , k.rbsc$bl$def#.get_close_date  close_date
     , k.base#.today
from   dual;"
"order by count(*) desc";"false";"ocd";"order by count(*) desc"
"auto trace";"false";"at";"set autotrace traceonly;"
"--+ ----------------------------------------------------------------------------";"false";"--+";"--+ ----------------------------------------------------------------------------"
"set for autotrace";"false";"setto";"set linesize 200
set echo on
set serveroutput on
set time on
set timing on
exec k.session#.open_session;
set autotrace traceonly;
|"
